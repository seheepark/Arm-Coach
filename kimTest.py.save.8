import socket
import MySQLdb
import mibanda
import time
import os
import sys

#buttonSrc = os.system('python /home/edison/switch.py')

#if not buttonSrc == 0:
#	print >> sys.stderr, 'error occured : ', buttonSrc

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("", 5002))
server_socket.listen(5)
print("wating...")
db=MySQLdb.connect('localhost','root','root','kim')
#connect database schema
cursor=db.cursor()
cursor.execute("USE kim")

#connect miband using bluetooth
sd=mibanda.DiscoveryService()

device=mibanda.BandDevice("88:0f:10:96:b1:4b", "MI")
device.connect()
print ("connect miband")

#connect edison-android
while 1:
	client_socket, address=server_socket.accept()
	print ("connect from" ,address)
	connectEvent=0
	countLoop=0
	data=client_socket.recv(1024)
	countTime=0
	print(data)
	
	while 1:
		if connectEvent==0:
			data2=data.split('.')
			Event = data2[0]
			UserName=data2[1]
			TargetRange=int(data2[2])
			Gender=data2[3]
			Age=int(data2[4])
			Height=int(data2[5])
			Weight=int(data2[6])
			TargetTime=int(data2[7])#Goal
			#First=int(data2[8])#first run or second,third....
			averageRange=(Height*0.37 + Height-100)/2 #walk range
			connectEvent=1 
			if Event=="MARATHON": #init marathon values
				Voltage=TargetRange/TargetTime
				str="INSERT INTO marathon VALUES(%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)" % (Voltage,Voltage,Voltage,Voltage,Voltage,Voltage,Voltage,Voltage,Voltage)
				cursor.execute(str)
		if Event=="MARATHON":
			cursor.execute("select * from marathon")
			while True:
				row=cursor.fetchone()
				if row==None:
					break;
			record=[" "]
			timeFirst=0
			count=0
			while True:
				sector=TargetRange/10
 				NowSteps=80#device.getSteps()
				SectorSteps=NowSteps-Steps
				Steps=20#NowSteps
				movement=averageRange*SectorSteps
				if movement>sector:	#in sector
					time1=time.time()-t #time
					time=time1-timeFirst #
					timeFirst=time1
					v=movement/time #sector voltage
					if row[count]>v:
						print ("slow")
					else:
						print("fast")

					s=`count`
					s="sector"+s
					str="UPDATE marathon SET %s = \"%d\"" % (s,v)
					cursor.execute(str)
					record.append(v)
					count=count+1
					db.commit()
				elif (time.time()-t)%300==0:			#not sector.
					if row[count]>v:
						print ("slow")
					else:
						print("fast")

				if count==10:
					record.remove(" ")
					str="INSERT IN record VALUES(%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)" % (record[0],record[1],record[2],record[3],record[4],record[5],record[6],record[8],record[9])
					cursor.execute(str)
					db.commit()
					break
	
#finish marathon
			averageList=[" "]
			countList=0
			cursor.execute("select * from record")
			while True:
				row=cursor.fetchone()
				if row==None:
					break;
				else:
					average=row[0]+row[1]+row[2]+row[3]+row[4]+row[5]+row[6]+row[7]+row[8]+row[9]
					averageList.append(average)
					countList=countList+1
			averageList.remove(" ")
			if countList!=0 or countList!=1:
	#cursor.execute("DELETE FROM record")
				if (averageList[countList]-averageList[0])/countList>0:
					print("up ! goodboy")
				else:
					print("badboy! down")
				if (averageList[countList]-averageList[countList])>0:
					print("yesterday better")
				else:
					print("yesterday notgoods")

		break				
			if Event=="JOGGING":
				#cursor.execute("select * from jogging")
			firstV = 5 #firstV =  round((TargetRange / TargetTime), 2)
			steps = 50
			NowSteps = 80
			dist = averageRange*(NowSteps - steps)
			spendTime = time.time()-t
			currentV = 22#round(dist/spendTime, 2)
	
			if First==1:
				str="INSERT INTO jogging VALUES(%d)" % (firstV)
 				cursor.execute(str)
				str="INSERT INTO jogging VALUES(%d)" % (currentV)
				cursor.execute(str)
				db.commit()
				#if currentV < firstV
				#	print ("Hurry Up")
				#elif currentV > firstV
				#	print ("Run Slow")
				#else
				#	print("Good, cheer up!!")
			else:
				str="SELECT * FROM jogging ORDER BY day"
				cursor.execute(str)
				result=cursor.fetchall()
				total=len(result)
				str="SELECT AVG(velocity) FROM jogging"
				avg = cursor.execute(str)
				currentV = round(dist/spendTime, 2)
				sum = 0									
				stdDeviation = 0	
	
				dayVelocity = {}
		
				if total < 1:
					print ("No daliy velocity entries!")
				else:
					for i in range(total):
						dayVelocity[i] = result[i][1] #velocity	
						sum += pow(abs(avg-velocity[i]), 2)
						stdDeviation = round(sqrt(sum/total), 2)
					tmp = avg-stdDeviation
					if tmp > currentV:							
						print("Hurry Up")
					elif tmp < currentV:
						print("Run Slow")
					else:
						print("Good, cheer up!!")
				str="INSERT INTO jogging VALUES(%d)" % (currentV)
				cursor.execute(str)
				db.commit()
		if Event=="Player-soccer":
			print "Player-soccer mode"

			while True:
				# player press button
				data2 = data.split('.')
			
				if data2 == 'start': #if player press start button
					print "Start button is pressed"
					tmpStep1 = device.getSteps()
				elif data2 == 'end': # if player press ending button
					print "End button is pressed"
					maxAvg = 0
					minAvg = 0

					tmpStep2 = device.getSteps()
					totalSteps = tmpStep2 - tmpStep1
					move = ((Height-100)*totalSteps)/100 # player's moving distance
					# save move data to kim DB
					db2 = MySQLdb.connect ('localhost', 'root', 'root', 'kim')
					cursor2 = db2.cursor()
					cursor2.execute("USE kim")

					countStr = "select Count(move) from value1"
					cursor2.execute(countStr)
					val1CountTmp = cursor2.fetchone()
					val1Count = int(''.join(map(str,val1CountTmp))) 
					# calculate player's table size
					# first, compare max, min <-> move data
					avgCountStr = "select Count(avg) from value2" # calculate value2's size
					cursor2.execute(avgCountStr)
					avgCountTmp = cursor2.fetchone()
					avgCount = int(''.join(map(str,avgCountTmp)))

					if avgCount == 0: # if no data in value2's avg columm / initial case
						insertMaxAvgStr = "INSERT INTO (value2) VALUES (%d)" % (move)
						cursor2.execute(insertMaxAvgStr)
						db2.commit()
						insertMinAvgStr = "INSERT INTO (value2) VALUES (%d)" % (move)
						cursor2.execute(insertMinAvgStr)
						db2.commit()
						insertMoveStr = "INSERT INTO (value1) VALUES (%d)" % (move)
						cursor2.execute(insertMoveStr)
						db2.commit()
					else: # not initial case
						avgStr = "select * from value2"
						cursor2.execute(avgStr)
						tmpAvg = cursor2.fetchall()
						maxAvg = tmpAvg[0][0]
						minAvg = tmpAvg[1][0]
						# calculate player's max, min conditions and compare recent move data
						if move > maxAvg:
							maxAvg = (move+maxAvg)/2
						elif move < minAvg:
							minAvg = (move+minAvg)/2
						else:
							tmpMaxMove = maxAvg-move
							tmpMinMove = move-minAvg
							if tmpMaxMove > tmpMinMove:
								minAvg = (move+minAvg)/2
							elif tmpMaxMove < tmpMinMove:
								maxAvg = (move+maxAvg)/2
					delVal2Str = "delete from value2"
					cursor2.execute(delVal2Str)
					db2.commit()
					insertMaxAvgStr = "INSERT INTO (value2) VALUES (%d)" % (maxAvg)
					cursor2.execute(insertMaxAvgStr)
					db2.commit()
					insertMinAvgStr = "INSERT INTO (value2) VALUES (%d)" % (minAvg)
					cursor2.execute(insertMinAvgStr)
					db2.commit()
					if val1Count == 4:
						delVal1Str = "delete from value1"
						cursor2.execute(delVal1Str)
						db2.commit()
						insertMoveStr = "INSERT INTO (value1) VALUES (%d)" % (move)
						cursor2.execute(insertMoveStr)
						db2.commit()
					else:
						insertMoveStr = "INSERT INTO (value1) VALUES (%d)" % (move)
						cursor2.execute(insertMoveStr)
						db2.commit()
					break	
#db.close()
#server_socket.close()
print("close")
